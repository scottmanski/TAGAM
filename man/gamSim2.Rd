% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamSim2.R
\name{gamSim2}
\alias{gamSim2}
\title{Simulated data for GAM's}
\usage{
gamSim2(n, p, test.n, sigma, probs)
}
\arguments{
\item{n}{numeric value specifying the number of observations.}

\item{p}{numeric value specifying the number of covariates.}

\item{test.n}{numeric value specifying the number of observations in the test set.}

\item{sigma}{numeric value specifying the standard deviation of the errors.}

\item{probs}{numeric vector of length 6 specifying the proportion of covariates that are
polynomial, linear, exponential, logarithmic, sinusoidal, and zero functions.}
}
\value{
A named list containing \code{data}, \code{functions}, \code{line}, and \code{test}.
  \item{\code{data}}{An \code{n}\eqn{\times} \code{p+1} dataframe containing the simulated data.  The first column contains
  the response, with all subsequent columns containing the covariates.}
  \item{\code{functions}}{A list of length \code{p} containing the true functions.}
  \item{\code{line}}{A character vector of length \code{p} containing the type of function used.}
  \item{\code{test}}{An \code{test.n}\eqn{\times} \code{p+1} dataframe containing the simulated test data.  The first column contains
  the response, with all subsequent columns containing the covariates.}
}
\description{
This function creates simulated datasets to illustrate the use of \code{\link{gam3}}.
}
\details{
This function creates simulated datasets to illustrate the use of \code{\link{gam3}}.
The covariates are sampled uniformly over $[0, 1]$, and their associated functions are randomly
chosen from polynomial, linear, exponential, logarithmic, sinusoidal, and zero using weights provided
in the \code{probs} argument.
}
\examples{
set.seed(2018)
probs <- c(0.1, 0.1, 0.1, 0.1, 0.1, 0.5)
simulated_data <- gamSim2(n = 100, p = 1, test.n = 20, sigma = 0.1, probs = probs)
# -1*2*x*sin(2.70259540737607*pi * x^2 - 1.3270146084221)
sin.fun <- function(x) eval(parse(text = simulated_data$functions[[1]]))
truth <- sin.fun(seq(0, 1, length.out = 100))
truth <- truth/diff(range(truth))
plot(simulated_data$data[, 2], simulated_data$data[, 1])
lines(seq(0, 1, length.out = 100), truth, col = "red")

}
